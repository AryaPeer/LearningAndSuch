Backtracking is an algorithm that finds solutions by building a solution and then undoing choices that lead to a dead end.

Useful for problems where you need to find answers by searching through a large number 
of possibilities and find possible solutions to the problem that fit constraints.

Solution steps:
1. Understand problem
2. Develop recursive alg that incrementally builds solutions and backtracks when a dead end is reached
3. define a base case of when to stop recursion
4. Test sol

When to use: 
1. Generating possible sets
2. Find all possible sols  
3. Find a specific sol that fits a set of constraints (backtracks when something is wrong)
4. Solving puzzles or other combinatorial problems

If we have an array numsnums of distinct integers, what are all the possible permutations? If the input is [1,2,3][1,2,3], then the permutations would be 
[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]. In C++, it is easy to solve this problem by using the built-in STL next_permutation. However, we can also solve it using 
backtracking.

1. Sort the input array if necessary. However, in this example, sorting is not necessary.
sort(nums.begin(), nums.end());

2. Define ans and tmp where ans is the array storing all final permutations and tmp is used to store possible permutations at some point.
vector<vector<int>> ans;
vector<int> tmp;

3. Call backtrack() function in main
backtrack(nums, ans, tmp);

4. Let's add logic in backtrack() function. First we need to define the exit criteria. When should we push tmp to ans? If tmp already got enough candidates, then we can push tmp to ans.

if ((int) tmp.size() == (int) nums.size()) {
    ans.push_back(tmp);
    return;
}

5. Iterate each number, check If the candidate has been used or not, skip it if it is already in tmp. 
Otherwise, push it to tmp and call backtrack() again. After that, remove the previous candidate from tmp and move to the next candidate.

for (auto x : nums) {
    if (find(tmp.begin(), tmp.end(), x) != tmp.end()) continue;
    tmp.push_back(x);
    backtrack(nums, ans, tmp);
    tmp.pop_back();   
}